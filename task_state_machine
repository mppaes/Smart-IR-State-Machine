/****************************************************************************
*                                                  São José dos Campos - SP *
*                                                                           *
* Mateus Pinto Paes                                                         *
* ============================================                              *
*                                                                           *
* Programa: HOME-IR                                                         *
* Projeto: HOME-IR                                                          *
* VersãoGit: N/A                                                             *
*                                                                           *
****************************************************************************/
/*********************************************************************
* Includes de Arquivos
*********************************************************************/
#include <Adafruit_CC3000.h>
#include <Adafruit_CC3000_Server.h>
#include <IRremote.h>
#include <SPI.h>
#include <EEPROM.h>
/********************************************************************************
*  Constantes
*******************************************************************************/
/*** Define Porta de Comunição no IP, Por Padrão utiliza-se a 80 ***/
#define LISTEN_PORT           80     
#define TIMEOUT_MS            500    // Amount of time in milliseconds to wait for
                                     // an incoming request to finish.  Don't set this
                                     // too high or your server could be slow to respond.

/*******************************************************************************
*  Tamanho das Struct
******************************************************************************/
#define MAX_ELEMENTO_STRU 5
        
/*****************************************************************************
*  Definicoes IO Digital
*****************************************************************************/
#define Serial_RX0              0
#define Serial_TX0              1
#define ADAFRUIT_CC3000_IRQ     2
#define RECEPTOR_INFRA_RED      4
#define EMISSOR_INFRA_RED       5
#define ADAFRUIT_CC3000_VBAT    7
#define TFT_RST                 8
#define TFT_DC                  9     //Pino Utilizando  DATA/Command Select - Display Touch T
#define ADAFRUIT_CC3000_CS      10    //Chip Select AdaFruit CC3000 WIFI
#define TFT_CS                  11    //Chip Select AdaFruit LCD TFT 1.8"
#define LCD_SD_CS               12    //Chip Select AdaFruit LCD Cartão SD
#define LED_ARDUINO             13    //Pino do Led Arduino
#define SPI_MISO                50
#define SPI_MOSI                51
//#define SPI_SCK                 52
#define SPI_SCK                 53
/*** SPI PINAGEM  ***/
// SPI MEGA,SCK = 52, MISO = 50 e MOSI 51
// SPI UNO, SCK = 13, MISO = 12 e MOSI = 11
 
/*****************************************************************************
*  Definicoes IO Analógicas
*****************************************************************************/
 
/*****************************************************************************
*  Conexão WIRELES
*****************************************************************************/
#define WLAN_SSID       "Mateus iPhone"   // Nome da rede nao exceder 32 carecteres
#define WLAN_PASS       "mpintopaes"         //Senha
#define WLAN_SECURITY   WLAN_SEC_WPA2        // Seguranca da rede WLAN_SEC_UNSEC,
                                             //WLAN_SEC_WEP, WLAN_SEC_WPA or
                                             //WLAN_SEC_WPA2
//#define WLAN_SSID       "JoNet"   // Nome da rede nao exceder 32 carecteres
//#define WLAN_PASS       "mateusjoaopedro"         //Senha
 

/*****************************************************************************
*  Structs 
*****************************************************************************/  
struct comodo
{
    char *ambiente;
    struct device
    {
        char *aparelho;
        struct tecla
        {
            char *botao;
            struct leitura_ir
            {
                long int dado_ir;
            }ler_ir[MAX_ELEMENTO_STRU];
        }tec[MAX_ELEMENTO_STRU];
    }dev[MAX_ELEMENTO_STRU];
} como[MAX_ELEMENTO_STRU];
//Exemplos de Utilização
/*como[0].dev[0].tec[0].ler_ir[0].dado_ir = 0xFFAB12FA
  como[0].dev[0].tec[0].ler_ir[1].dado_ir = 0xFEBCDADA
  como[0].dev[0].tec[0].botao = "Liga"
  como[0].dev[0].tec[1].botao = "CH+"
  como[0].dev[0].aparelho = "TV"
  como[0].dev[1].aparelho = "NET"
  como[0].ambiente = "Sala"  
  como[0].ambiente = "Quarto"  
*/
/*****************************************************************************
*  Máquina de Estado
*****************************************************************************/
typedef enum
{
    kConectandoWireless = 0,
    kOperacional,
    kLeituraDoIR
}MaquinaEstado_t;
 
/*****************************************************************************
*  Variáveis GLOBAIS
*****************************************************************************/
boolean bexibe_primeira_vez = false;

/*** Instancia AdafruitCC3000Server na var echoServer na Porta 80 ***/
Adafruit_CC3000_Server echoServer(LISTEN_PORT);
 
/*** Instancia AdafruitCC3000 com os Pinos de CS, IRQ e CLK ***/
Adafruit_CC3000 cc3000 = Adafruit_CC3000(ADAFRUIT_CC3000_CS, ADAFRUIT_CC3000_IRQ, ADAFRUIT_CC3000_VBAT,
                                         SPI_CLOCK_DIVIDER);

/*** Instancia String na var readString***/
String readString;
 
/*** Instancia Infraveremlho ***/
IRsend IR_EMISSOR_INFRA_RED;  //Variavel que envia o codigo
IRrecv IRRecv(RECEPTOR_INFRA_RED);
decode_results ir_results;  //Armazena os resultado decodificado do receptor IR

/*** Instancia Status do Wifi ***/
status_t wifistatus = STATUS_DISCONNECTED;
 
/*** Instancia maquinaestado na var state inicializando no modo BUSCA ***/
MaquinaEstado_t state = kConectandoWireless;
 
/*****************************************************************************
*  Protótipo de Funções
*****************************************************************************/
void testdrawtext(char *text, uint16_t color);
/****************************************************************************/
/****************************************************************************/
/*                                                                          */
/*                        FUNÇÕES LOCAIS                                    */
/*                                                                          */
/****************************************************************************/

void func_init_vars_structs(void)
{
    //String = SALA-TV-(Liga, CH+, CH-, VOL+, VOL-)
    como[0].ambiente = "SALA";
    como[0].dev[0].aparelho = "TV";
    como[0].dev[0].tec[0].botao = "LIGA";
    como[0].dev[0].tec[1].botao = "CH+";
    como[0].dev[0].tec[2].botao = "CH-";
    como[0].dev[0].tec[3].botao = "VOL+";
    como[0].dev[0].tec[4].botao = "VOL-";
    //String = SALA-NET-(Liga, CH+, CH-, VOL+, VOL-)
    /*como[0].ambiente = "SALA";
    como[0].dev[1].aparelho = "NET";
    como[0].dev[1].tec[0].botao = "LIGA";
    como[0].dev[1].tec[1].botao = "CH+";
    como[0].dev[1].tec[2].botao = "CH-";
    como[0].dev[1].tec[3].botao = "VOL+";
    como[0].dev[1].tec[4].botao = "VOL-";*/
}

void func_read_eemprom(void)
{
    int buffer_read_eeprom[32];
    long int valor_escrito_eeprom;
    int count = 32;
    int count_aux;
    int i;
    // ler dado da EEPROM
    for(i = 0; i < 32; i++)
    {
        buffer_read_eeprom[count] = EEPROM.read(count);
        Serial.print("Valor da EEPROM: ");
        Serial.println(buffer_read_eeprom[count], HEX);
        count--;
        delay(200);
    }
    valor_escrito_eeprom = buffer_read_eeprom[1];
    valor_escrito_eeprom = ((valor_escrito_eeprom << 8) | buffer_read_eeprom[2]);
    valor_escrito_eeprom = ((valor_escrito_eeprom << 8) | buffer_read_eeprom[3]);
    valor_escrito_eeprom = ((valor_escrito_eeprom << 8) | buffer_read_eeprom[4]);
    como[0].dev[0].tec[0].ler_ir[0].dado_ir = valor_escrito_eeprom;
    Serial.print("Valor da Final EEPROM-1: ");
    Serial.println(valor_escrito_eeprom, HEX);
    delay(500);
    
    valor_escrito_eeprom = buffer_read_eeprom[5];
    valor_escrito_eeprom = ((valor_escrito_eeprom << 8) | buffer_read_eeprom[6]);
    valor_escrito_eeprom = ((valor_escrito_eeprom << 8) | buffer_read_eeprom[7]);
    valor_escrito_eeprom = ((valor_escrito_eeprom << 8) | buffer_read_eeprom[8]);
    como[0].dev[0].tec[0].ler_ir[1].dado_ir = valor_escrito_eeprom;
    Serial.print("Valor da Final EEPROM-2: ");
    Serial.println(valor_escrito_eeprom, HEX);
    delay(500);
    
    valor_escrito_eeprom = buffer_read_eeprom[9];
    valor_escrito_eeprom = ((valor_escrito_eeprom << 8) | buffer_read_eeprom[10]);
    valor_escrito_eeprom = ((valor_escrito_eeprom << 8) | buffer_read_eeprom[11]);
    valor_escrito_eeprom = ((valor_escrito_eeprom << 8) | buffer_read_eeprom[12]);
    como[0].dev[0].tec[0].ler_ir[2].dado_ir = valor_escrito_eeprom;
    Serial.print("Valor da Final EEPROM-3: ");
    Serial.println(valor_escrito_eeprom, HEX);
    delay(500);
    
    valor_escrito_eeprom = buffer_read_eeprom[13];
    valor_escrito_eeprom = ((valor_escrito_eeprom << 8) | buffer_read_eeprom[14]);
    valor_escrito_eeprom = ((valor_escrito_eeprom << 8) | buffer_read_eeprom[15]);
    valor_escrito_eeprom = ((valor_escrito_eeprom << 8) | buffer_read_eeprom[16]);
    como[0].dev[0].tec[0].ler_ir[3].dado_ir = valor_escrito_eeprom;
    Serial.print("Valor da Final EEPROM-4: ");
    Serial.println(valor_escrito_eeprom, HEX);
    delay(500);
    
    valor_escrito_eeprom = buffer_read_eeprom[17];
    valor_escrito_eeprom = ((valor_escrito_eeprom << 8) | buffer_read_eeprom[18]);
    valor_escrito_eeprom = ((valor_escrito_eeprom << 8) | buffer_read_eeprom[19]);
    valor_escrito_eeprom = ((valor_escrito_eeprom << 8) | buffer_read_eeprom[20]);
    como[0].dev[0].tec[0].ler_ir[4].dado_ir = valor_escrito_eeprom;
    Serial.print("Valor da Final EEPROM-5: ");
    Serial.println(valor_escrito_eeprom, HEX);
    delay(500);
}

/****************************************************************************/
/**
* @ingroup Home_IR
* @brief Inicialização dos Hardwares, Inicialização dos Pino I/O
*                                     Inicialização da Comunicação Serial USART
*                                     Inicialização Interrupções
*                                     Inicialização dos Timers
*                                     Inicialização da Maquina de Estado
*                                   
 * @param   N/A
* @return  N/A
*
* @note Verificado por:
* @note Validado por:
*
* @author  Mateus Pinto Paes
* @date  10/fev/2015
*
 */
 
/*********************************************************************
* setup
*********************************************************************/
void setup(void)
{
    /*** Limpa Comunicacao Serial ***/
    Serial.flush();     
    /*** Inicia comunicao Serial com parametro BAUDRATE ***/
    Serial.begin(9600);
    Serial.println();
    Serial.println();
    Serial.println("------------------------------------------");
    Serial.println("---------------HOME-IR--------------------");
    Serial.println("------------------------------------------");
    func_read_eemprom();
    Serial.println("Inicializando Home IR");
    func_init_vars_structs();
    Serial.println("Variaveis Inicializadas");
    delay(100);
}

/***
* @ingroup Home_IR
* @brief Loop Infinito. Onde as funções são executadas infinitamente de acordo com,
*                       Com isntruções definidas pelo programador.
*                                    
 *                                   
 * @param   N/A
* @return  N/A
*
* @note Verificado por:
* @note Validado por:
*
* @author  Mateus Pinto Paes
* @date  10/fev/2015
*
 ***/
 
/*********************************************************************
* loop
*********************************************************************/
void loop(void)
{
    //Flag de Controle
    //boolean bexibe_primeira_vez;
    /*** Verifica Status da placa ***/
    switch(state)
    {
        /*
        *** Inicia Conexão com a Rede Selecionada, ConectAP e CheckDHCP ***
        */
        case kConectandoWireless:
            Serial.println("Conectando a Rede Wireless");
            func_conexao_ip_rede();   
            Serial.println("Conexao Estabelecida");
            state = kOperacional;
            bexibe_primeira_vez = false;
        break;
        /*
        *** Estado Operacional Executa loop do Software ***
        */
        case kOperacional:
            if(bexibe_primeira_vez == false)
            {
                Serial.println("Estado Operacional");
                bexibe_primeira_vez = true;      
            }
          
            /*** Verifica Se CC3000 Esta conectado a Rede Wireless, se Não ***/
            if (func_verifica_conexao() == true)
            {  
                state = kOperacional;
                func_client_app();//Chamca Funcao e Verifica se Tem algum Cliente Externo enviando Dados
            }
            else
            {
                state = kConectandoWireless;
                bexibe_primeira_vez = false;
            }
        break;
        /*
        *** Estado Leitura do IR ***
        */
        case kLeituraDoIR:
            if(bexibe_primeira_vez == false)
            {
                Serial.println("Estado Gravacao do Controle Infra Vermelho");
                bexibe_primeira_vez = true;
            }
            /*** Verifica Se CC3000 Esta conectado a Rede Wireless, se Não ***/
            if (func_verifica_conexao() == true)
            {  
                state = kLeituraDoIR;
                func_client_app();                
            }
            else
            {
                state = kConectandoWireless;
                bexibe_primeira_vez = false;
            }
        break;
        default:
            state = kConectandoWireless;
        break;
    }
 
}
